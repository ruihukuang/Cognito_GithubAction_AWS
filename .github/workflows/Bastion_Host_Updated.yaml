name: Setup Bastion Host

on:
 workflow_dispatch:
      
permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read 
  
jobs:
  setup-cognito:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
         aws-region: ${{ secrets.REGION }}

    - name: Find Subnet ID
      id: find_subnet
      run: |
        subnet_id=$(aws ec2 describe-subnets --filters "Name=cidrBlock,Values=10.0.0.0/24" --query "Subnets[*].SubnetId" --output text)
        echo "subnet_id=$subnet_id" >> $GITHUB_ENV

    - name: Find Route Table ID
      run: |
        route_table_id=$(aws ec2 describe-route-tables --filters "Name=association.subnet-id,Values=${{ env.subnet_id }}" --query "RouteTables[*].RouteTableId" --output text)
        echo "route_table_id=$route_table_id" >> $GITHUB_ENV

    - name: Find VPC ID
      run: |
        VPC_id=$(aws ec2 describe-vpcs --filters "Name=cidr,Values=10.0.0.0/16" --query "Vpcs[*].VpcId" --output text)
        echo "VPC_id=$VPC_id" >> $GITHUB_ENV
    
    - name: Check if Stack Exists
      id: check_stack
      run: |
        STACK_NAME="BastionHostStack"
        if aws cloudformation describe-stacks --stack-name $STACK_NAME > /dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_ENV
        else
          echo "exists=false" >> $GITHUB_ENV
        fi
        
    - name: Check CloudFormation Stack Status
      id: check_status
      if: env.exists == 'true'
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name BastionHostStack --query "Stacks[0].StackStatus" --output text)
        echo "Stack status is $STACK_STATUS"
        echo "::set-output name=status::$STACK_STATUS"

    - name: Delete CloudFormation Stack if ROLLBACK_COMPLETE
      if: (steps.check_status.outputs.status == 'ROLLBACK_COMPLETE' || steps.check_status.outputs.status == 'ROLLBACK_IN_PROGRESS'|| steps.check_status.outputs.status == 'UPDATE_ROLLBACK_COMPLETE' ) && env.exists == 'true'
      run: |
        aws cloudformation delete-stack --stack-name BastionHostStack
        aws cloudformation wait stack-delete-complete --stack-name BastionHostStack

    - name: Deploy CloudFormation Stack
      run: |
        aws cloudformation create-stack \
          --template-body file://CloudFormation/bastion_host.yaml \
          --stack-name BastionHostStack \
          --capabilities CAPABILITY_IAM \
          --parameters ParameterKey=RouteTableId,ParameterValue=${{ env.route_table_id }} ParameterKey=VpcId,ParameterValue=${{ env.VPC_id }}
        aws cloudformation wait stack-create-complete --stack-name BastionHostStack 
    
    - name: Get Bastion Host Public IP
      id: bastion_ip
      run: |
        bastion_ip=$(aws cloudformation describe-stacks --stack-name BastionHostStack --query "Stacks[0].Outputs[?OutputKey=='BastionPublicIP'].OutputValue" --output text)
        echo "::set-output name=ip::$bastion_ip"

    - name: Create SSH key file
      run: |
        echo "${{ secrets.SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: SSH to Bastion Host and Update Kubeconfig
      env:
        BASTION_IP: ${{ steps.bastion_ip.outputs.ip }}
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$BASTION_IP << EOF
          set -x  # Enable command tracing
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name MyEKSCluster
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv kubectl /usr/local/bin/
          kubectl version --client
          wget https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
          mv aws-iam-authenticator_0.5.9_linux_amd64 aws-iam-authenticator
          chmod +x aws-iam-authenticator
          sudo mv aws-iam-authenticator /usr/local/bin/
          aws-iam-authenticator help
          kubectl get nodes
        EOF

